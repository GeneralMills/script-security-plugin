<?xml version="1.0" encoding="UTF-8"?>
<!--
The MIT License

Copyright 2014 CloudBees, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:l="/lib/layout" xmlns:f="/lib/form">
    <style>
        tr.selected td {
            background-color: #6886b9;
            color: #fff;
        }
        table.approvals {
            border-collapse:collapse;
            height:189px;

            tr {
                width: 100%;
                display: inline-table;
                table-layout: fixed;
            }
        }

        tbody.approvals {
            overflow-y:scroll;
            height:189px;
            position:absolute;
            border:1px solid;
        }

    </style>
    <l:layout title="In-process Script Approval" permission="${app.RUN_SCRIPTS}">
        <st:include page="sidepanel.jelly" it="${app}"/>
        <l:main-panel>
            <script>
                var mgr = <st:bind value="${it}"/>;
                function hideScript(hash) {
                    $('ps-' + hash).remove();
                }
                function approveScript(hash) {
                    mgr.approveScript(hash);
                    hideScript(hash);
                }
                function denyScript(hash) {
                    mgr.denyScript(hash);
                    hideScript(hash);
                }
                function hideSignature(hash) {
                    $('s-' + hash).style.display = 'none';
                }
                function updateApprovedSignatures(r) {
                    var both = r.responseObject();

                    if(both[0].length > 0) {
                        var newApprovedSignatures = document.createElement('tbody');
                        var oldApprovedSignatures = $('approvedSignaturesBody');
                        newApprovedSignatures.setAttribute('class', 'approvals');
                        newApprovedSignatures.setAttribute('id', 'approvedSignaturesBody');
                        both[0].forEach(function (approvedSig) {
                            var tr = document.createElement('tr');

                            var td = document.createElement('td');
                            td.setAttribute('onclick', 'selectRow(this)');
                            td.setAttribute('class', 'text_data');

                            var txt = document.createTextNode(approvedSig);

                            td.appendChild(txt);
                            tr.appendChild(td);
                            newApprovedSignatures.appendChild(tr);
                        });

                        if(oldApprovedSignatures === null) {
                            $('approvedSignatures').appendChild(newApprovedSignatures);
                        } else {
                            $('approvedSignatures').replaceChild(newApprovedSignatures, oldApprovedSignatures);
                        }
                        if(both[0].length === 0 &amp;&amp; $('approvedSignatures').firstChild !== null) {
                            $('approvedSignatures').removeChild($('approvedSignatures').firstChild);
                        }
                    }

                    if(both[1].length > 0) {
                        var newApprovedAclSignatures = document.createElement('tbody');
                        var oldApprovedAclSignatures = $('aclApprovedSignaturesBody');
                        newApprovedAclSignatures.setAttribute('class', 'approvals');
                        newApprovedAclSignatures.setAttribute('id', 'aclApprovedSignaturesBody');
                        both[1].forEach(function (aclApprovedSig) {
                            var tr = document.createElement('tr');

                            var td = document.createElement('td');
                            td.setAttribute('onclick', 'selectRow(this)');
                            td.setAttribute('class', 'text_data');

                            var txt = document.createTextNode(aclApprovedSig);

                            td.appendChild(txt);
                            tr.appendChild(td);
                            newApprovedAclSignatures.appendChild(tr);
                        });

                        if(oldApprovedAclSignatures === null) {
                            $('aclApprovedSignatures').appendChild(newApprovedAclSignatures);
                        } else {
                            $('aclApprovedSignatures').replaceChild(newApprovedAclSignatures, oldApprovedAclSignatures);
                        }
                    }
                    if(both[1].length === 0 &amp;&amp; $('aclApprovedSignatures').firstChild !== null) {
                        $('aclApprovedSignatures').removeChild($('aclApprovedSignatures').firstChild);
                    }

                    var newApprovedDangerousSignatures = document.createElement('tbody');
                    var oldApprovedDangerousSignatures = $('dangerousApprovedSignaturesBody');
                    newApprovedDangerousSignatures.setAttribute('class', 'approvals');
                    newApprovedDangerousSignatures.setAttribute('id', 'dangerousApprovedSignaturesBody');
                    both[2].forEach(function (aclApprovedSig) {
                        var tr = document.createElement('tr');

                        var td = document.createElement('td');
                        td.setAttribute('onclick', 'selectRow(this)');
                        td.setAttribute('class', 'text_data');

                        var txt = document.createTextNode(aclApprovedSig);

                        td.appendChild(txt);
                        tr.appendChild(td);
                        newApprovedDangerousSignatures.appendChild(tr);
                    });

                    if(oldApprovedDangerousSignatures === null) {
                        $('dangerousApprovedSignatures').appendChild(newApprovedDangerousSignatures);
                    } else {
                        $('dangerousApprovedSignatures').replaceChild(newApprovedDangerousSignatures, oldApprovedDangerousSignatures);
                    }
                    if(both[2].length === 0 &amp;&amp; $('dangerousApprovedSignatures').firstChild !== null) {
                        $('dangerousApprovedSignatures').removeChild($('dangerousApprovedSignatures').firstChild);
                    }
                }

                function approveSignature(signature, hash) {
                    mgr.approveSignature(signature, function(r) {
                        updateApprovedSignatures(r);
                    });
                    hideSignature(hash);
                }
                function aclApproveSignature(signature, hash) {
                    mgr.aclApproveSignature(signature, function(r) {
                        updateApprovedSignatures(r);
                    });
                    hideSignature(hash);
                }
                function denySignature(signature, hash) {
                    mgr.denySignature(signature);
                    hideSignature(hash);
                }
                function clearApprovedSignatures() {
                    mgr.clearApprovedSignatures(function(r) {
                        updateApprovedSignatures(r);
                    });
                }
                function clearDangerousApprovedSignatures() {
                    mgr.clearDangerousApprovedSignatures(function(r) {
                        updateApprovedSignatures(r);
                    });
                }
                function clearSelectedSignatures() {
                    var rows = document.getElementsByClassName('selected');
                    var signatures = [];
                    for(row of rows) {
                        signatures.push(row.innerText);
                    }
                    mgr.clearSelectedSignatures(signatures, function(r) {
                        updateApprovedSignatures(r);
                    });
                }
                
                function renderPendingClasspathEntries(pendingClasspathEntries) {
                    if (pendingClasspathEntries.length == 0) {
                        $('pendingClasspathEntries-none').show();
                        $('pendingClasspathEntries').childElements().each(function(e){e.remove()});
                        $('pendingClasspathEntries').hide();
                    } else {
                        $('pendingClasspathEntries-none').hide();
                        $('pendingClasspathEntries').childElements().each(function(e){e.remove()});
                        /*
                           Create a list like:
                            <p id="pcp-${pcp.hash}">
                                <button class="approve" onclick="approveClasspathEntry('${pcp.hash}')">Approve</button> /
                                <button class="deny"    onclick="denyClasspathEntry('${pcp.hash}')">Deny</button> 
                                ${pcp.hash} (${pcp.path})
                            </p>
                         */
                        pendingClasspathEntries.each(function(e) {
                            var block = new Element('p', { 'id': 'pcp-' + e.hash });
                            var approveButton = new Element('button', { 'class': 'approve', 'hash': e.hash});
                            approveButton.insert('Approve');
                            approveButton.observe('click', function() {
                                approveClasspathEntry(this.readAttribute('hash'));
                            });
                            var denyButton = new Element('button', { 'class': 'deny', 'hash': e.hash});
                            denyButton.insert('Deny');
                            denyButton.observe('click', function() {
                                denyClasspathEntry(this.readAttribute('hash'));
                            });
                            block.insert(approveButton);
                            block.insert(denyButton);
                            block.insert("&lt;code title='" + e.hash + "'>" + e.path + "&lt;/code>");
                            
                            $('pendingClasspathEntries').insert(block);
                        });
                        $('pendingClasspathEntries').show();
                    }
                }
                
                function renderApprovedClasspathEntries(approvedClasspathEntries) {
                    if (approvedClasspathEntries.length == 0) {
                        $('approvedClasspathEntries-none').show();
                        $('approvedClasspathEntries').childElements().each(function(e){e.remove()});
                        $('approvedClasspathEntries').hide();
                        $('approvedClasspathEntries-clear').hide();
                    } else {
                        $('approvedClasspathEntries-none').hide();
                        $('approvedClasspathEntries').childElements().each(function(e){e.remove()});
                        /*
                           Create a list like:
                            <p id="acp-${acp.hash}">
                                <button class="delete" onclick="denyApprovedClasspathEntry('${pcp.hash}')">Delete</button> 
                                ${acp.hash} (${acp.path})
                            </p>
                         */
                        approvedClasspathEntries.each(function(e) {
                            var block = new Element('p', { 'id': 'acp-' + e.hash });
                            var deleteButton = new Element('button', { 'class': 'delete', 'hash': e.hash});
                            deleteButton.insert('Delete');
                            deleteButton.observe('click', function() {
                                if (confirm('Really delete this approved classpath entry? Any existing scripts using it will need to be rerun and the entry reapproved.')) {
                                    denyApprovedClasspathEntry(this.readAttribute('hash'));
                                }
                            });
                            block.insert(deleteButton);
                            block.insert("&lt;code title='" + e.hash + "'>" + e.path + "&lt;/code>");
                            
                            $('approvedClasspathEntries').insert(block);
                        });
                        $('approvedClasspathEntries').show();
                        $('approvedClasspathEntries-clear').show();
                    }
                }
                
                function renderClasspaths(r) {
                    renderPendingClasspathEntries(r.responseObject()[0]);
                    renderApprovedClasspathEntries(r.responseObject()[1]);
                }
                
                function approveClasspathEntry(hash) {
                    mgr.approveClasspathEntry(hash, function(r) {
                        renderClasspaths(r);
                    });
                }
                function denyClasspathEntry(hash) {
                    mgr.denyClasspathEntry(hash, function(r) {
                        renderClasspaths(r);
                    });
                }
                function denyApprovedClasspathEntry(hash) {
                    mgr.denyApprovedClasspathEntry(hash, function(r) {
                        renderClasspaths(r);
                    });
                }
                function clearApprovedClasspathEntries() {
                    mgr.clearApprovedClasspathEntries(function(r) {
                        renderClasspaths(r);
                    });
                }

                function selectRow(row) {
                    var tr = row.parentElement
                    if(tr.hasClassName("selected")) {
                        tr.removeClassName("selected");
                    } else {
                        tr.addClassName("selected");
                    }
                }
                
                Event.observe(window, "load", function(){
                    mgr.getClasspathRenderInfo(function(r) {
                        renderClasspaths(r);
                    });
                });
            </script>
            <j:choose>
                <j:when test="${it.pendingScripts.isEmpty()}">
                    <p>
                        No pending script approvals.
                    </p>
                </j:when>
                <j:otherwise>
                    <j:forEach var="ps" items="${it.pendingScripts}">
                        <div id="ps-${ps.hash}" class="pending-script">
                            <p class="ps-context">
                                <button class="approve" onclick="approveScript('${ps.hash}')">Approve</button> / <button class="deny" onclick="denyScript('${ps.hash}')">Deny</button> ${ps.language.displayName} script
                                <st:include it="${ps.context}" page="index.jelly"/>:
                            </p>
                            <f:textarea readonly="readonly" codemirror-mode="${ps.language.codeMirrorMode}" codemirror-config='"readOnly": true' rows="10" cols="80" value="${ps.script}"/>
                        </div>
                    </j:forEach>
                </j:otherwise>
            </j:choose>
            <p id="approvedScripts-clear">
                You can also remove all previous script approvals:
                <button onclick="if (confirm('Really delete all approvals? Any existing scripts will need to be requeued and reapproved.')) {mgr.clearApprovedScripts()}">Clear Approvals</button>
            </p>
            <p>
                Remove selected signatures:
                <button onclick="clearSelectedSignatures()">Clear selected</button>
            </p>
            <hr/>
            <j:choose>
                <j:when test="${it.pendingSignatures.isEmpty()}">
                    <p>
                        No pending signature approvals.
                    </p>
                </j:when>
                <j:otherwise>
                    <j:forEach var="s" items="${it.pendingSignatures}">
                        <div id="s-${s.hash}">
                            <p>
                                <button onclick="approveSignature('${s.signature}', '${s.hash}')">Approve</button> /
                                <j:if test="${!s.signature.startsWith('field')}">
                                    <button onclick="aclApproveSignature('${s.signature}', '${s.hash}')">Approve assuming permission check</button> /
                                </j:if>
                                <button onclick="denySignature('${s.signature}', '${s.hash}')">Deny</button> signature
                                <st:include it="${s.context}" page="index.jelly"/>:
                                <code>${s.signature}</code>
                                <j:if test="${s.dangerous}">
                                    <st:nbsp/><strong><font color="red">Approving this signature may introduce a security vulnerability! You are advised to deny it.</font></strong>
                                </j:if>
                            </p>
                        </div>
                    </j:forEach>
                </j:otherwise>
            </j:choose>
            <p>Signatures already approved:</p>
                <table class="approvals" id="approvedSignatures">
                        <tbody class="approvals" id="approvedSignaturesBody">
                            <j:forEach var="line" items="${it.approvedSignatures}"><tr><td onclick="selectRow(this)" class="text_data">${line}</td></tr></j:forEach>
                        </tbody>
                </table>
            <p>Signatures already approved assuming permission check:</p>
            <j:choose>
                <j:when test="${!empty(aclApprovedSignatures)}">
                    <table class="approvals" id="aclApprovedSignatures">
                        <tbody class="approvals" id="aclApprovedSignaturesBody">
                            <j:forEach var="line" items="${it.aclApprovedSignatures}"><tr><td onclick="selectRow(this)" class="text_data">${line}</td></tr></j:forEach>
                        </tbody>
                    </table>
                </j:when>
                <j:otherwise>
                    <table class="approvals" id="aclApprovedSignatures"></table>
                </j:otherwise>
            </j:choose>
            <j:set var="dangerousApprovedSignatures" value="${it.dangerousApprovedSignatures}"/>
            <p>Signatures already approved which <strong><font color="red">may have introduced a security vulnerability</font></strong> (recommend clearing):</p>
            <j:choose>
                <j:when test="${!empty(dangerousApprovedSignatures)}">
                    <table class="approvals" id="dangerousApprovedSignatures">
                        <tbody class="approvals" id="dangerousApprovedSignaturesBody">
                            <j:forEach var="line" items="${it.dangerousApprovedSignatures}"><tr><td onclick="selectRow(this)" class="text_data">${line}</td></tr></j:forEach>
                        </tbody>
                    </table>
                </j:when>
                <j:otherwise>
                    <table class="approvals" id="dangerousApprovedSignatures"></table>
                </j:otherwise>
            </j:choose>
            <p>
                You can also remove all previous signature approvals:
                <button onclick="if (confirm('Really delete all approvals? Any existing scripts will need to be rerun and signatures reapproved.')) {clearApprovedSignatures()}">Clear Approvals</button>
            </p>
            <p>
                Remove selected signatures:
                <button onclick="clearSelectedSignatures()">Clear selected</button>
            </p>
            <j:if test="${!empty(dangerousApprovedSignatures)}">
                Or you can just remove the dangerous ones:
                <button onclick="clearDangerousApprovedSignatures()">Clear only dangerous Approvals</button>
            </j:if>
            <hr/>
            <p id="pendingClasspathEntries-none">
                No pending classpath entry approvals.
            </p>
            <div id="pendingClasspathEntries">
                Classpath entries pending approval. (Beware of remote URLs, workspace files, or anything else that might change without your notice.)
            </div>
            <p>Classpath entries already approved:</p>
            <p id="approvedClasspathEntries-none">
                No approved classpath entries.
            </p>
            <div id="approvedClasspathEntries">
            </div>
            <p id="approvedClasspathEntries-clear">
                You can also remove all previous classpath entry approvals:
                <button onclick="if (confirm('Really delete all approvals? Any existing scripts using a classpath will need to be rerun and entries reapproved.')) {clearApprovedClasspathEntries()}">Clear Classpath Entries</button>
            </p>
        </l:main-panel>
    </l:layout>
</j:jelly>
